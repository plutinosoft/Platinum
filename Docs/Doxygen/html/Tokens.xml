<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>NPT_AllowedValueRange</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>NPT_AllowedValueRange</Scope>
    </TokenIdentifier>
    <Path>structNPT__AllowedValueRange.html</Path>
    <Abstract>The NPT_AllowedValueRange struct holds the min, max and step value allowed of a UPnP Service state va...</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NPT_IpAddressFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>NPT_IpAddressFinder</Scope>
    </TokenIdentifier>
    <Path>classNPT__IpAddressFinder.html</Path>
    <Abstract>The NPT_IpAddressFinder class is used to determine if a IP Address is found as part of a list of IP A...</Abstract>
    <DeclaredIn>PltUtilities.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NPT_StringFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>NPT_StringFinder</Scope>
    </TokenIdentifier>
    <Path>classNPT__StringFinder.html</Path>
    <Abstract>The NPT_StringFinder class is used to determine if a string is found as part of a list of strings.</Abstract>
    <DeclaredIn>PltUtilities.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_Action</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Abstract>The PLT_Action class provides a mechanism to call or verify the validity of a specific UPNP service a...</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_Action</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a4451baa8e5e7666aa486c03c3baf211a</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_Action</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a14c3570a7bf2bd659811f433a634afdd</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FormatSoapRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a80c5ce730ddc67d59e4f6e697e0f5ca2</Anchor>
    <Abstract>Called by a control point when serializing an action.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FormatSoapResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>aac7687204c5eb527a2ad5d32d63a7802</Anchor>
    <Abstract>Called by a device when serializing a response to an action.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetActionDesc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a896f75aedd80676182becc7760451bb9</Anchor>
    <Abstract>Return the action description.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetArgumentValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a8a30f97ece6feeaaf3ee74e237002dd4</Anchor>
    <Abstract>Retrieve the value of an argument given an argument name.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetArgumentValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a1e2ac290674064fcdf41fff3c1c6cd34</Anchor>
    <Abstract>Retrieve the value of an argument given an argument name.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetArgumentValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>ae9257a72ae5dd3c7e69e607582be6d18</Anchor>
    <Abstract>Retrieve the string value of an argument given an argument name.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetArgumentValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a99f233815a45a82119197ae7aa06ff1e</Anchor>
    <Abstract>Retrieve the value of an argument given an argument name.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>aa019d123a443906ee3338c9744f90d40</Anchor>
    <Abstract>Return the error description and code for the failed action.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetErrorCode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>ad3dd41b89136cee1ee4e0753b32b2540</Anchor>
    <Abstract>Return the error code for the failed action.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetArgumentOutFromStateVariable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a570d075a36452d6dd6ca618389f722df</Anchor>
    <Abstract>Set the output argument value from the associated current state variable value.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetArgumentsOutFromStateVariable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a0fdbbc24df47bcd2243412812c948533</Anchor>
    <Abstract>Set all the output argument values associated with state variables.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetArgumentValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a5bdaaa01987f7bc2eaea1718a812703f</Anchor>
    <Abstract>Set an argument value.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a840deef20e0d94956255df9e16f65617</Anchor>
    <Abstract>Set the error code and description in case of failure.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VerifyArguments</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>ad46c47961a64e3b37ad48be3fa45a27a</Anchor>
    <Abstract>Verify that all required arguments are set.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VerifyArgumentValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>a5bde53dc7977cf0d7814cfb144e04680</Anchor>
    <Abstract>Verify a value is valid for a given argument.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FormatSoapError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PLT_Action</Scope>
    </TokenIdentifier>
    <Path>classPLT__Action.html</Path>
    <Anchor>aaf724c7f6383f3894380e36a14e405d0</Anchor>
    <Abstract>Helper method for a device to serialize an action invocation error.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ActionDesc</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ActionDesc</Scope>
    </TokenIdentifier>
    <Path>classPLT__ActionDesc.html</Path>
    <Abstract>The PLT_ActionDesc class provides information about a UPnP Service given action.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ActionDesc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ActionDesc</Scope>
    </TokenIdentifier>
    <Path>classPLT__ActionDesc.html</Path>
    <Anchor>a7a84f40735417810bdf4d15a7fc1658b</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetArgumentDesc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ActionDesc</Scope>
    </TokenIdentifier>
    <Path>classPLT__ActionDesc.html</Path>
    <Anchor>ae47fd728704534371b0d6944dd7743ff</Anchor>
    <Abstract>Look for an argument given a name.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetArgumentDescs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ActionDesc</Scope>
    </TokenIdentifier>
    <Path>classPLT__ActionDesc.html</Path>
    <Anchor>a0148967346dd2bd4b23d3218730526a2</Anchor>
    <Abstract>Return an array of arguments.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ActionDesc</Scope>
    </TokenIdentifier>
    <Path>classPLT__ActionDesc.html</Path>
    <Anchor>af55878f1c51ca4e0b17e2e528a260ad4</Anchor>
    <Abstract>Return the action name.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetSCPDXML</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ActionDesc</Scope>
    </TokenIdentifier>
    <Path>classPLT__ActionDesc.html</Path>
    <Anchor>a1b5032f9ea8883aaf1e9d5e5cb42b7be</Anchor>
    <Abstract>Serialize action information to xml into an existing xml tree.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ActionDesc</Scope>
    </TokenIdentifier>
    <Path>classPLT__ActionDesc.html</Path>
    <Anchor>a113915ac135333c800b8f5f8ca75c3d3</Anchor>
    <Abstract>Return the service the action is associated with.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ActionDescNameFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ActionDescNameFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__ActionDescNameFinder.html</Path>
    <Abstract>The PLT_ActionDescNameFinder class provides a mechanism to find a PLT_ActionDesc given an action name...</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_Argument</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_Argument</Scope>
    </TokenIdentifier>
    <Path>classPLT__Argument.html</Path>
    <Abstract>The PLT_Argument class provides a mechanism to set or verify the validity of a specific UPNP service ...</Abstract>
    <DeclaredIn>PltArgument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ArgumentDesc</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ArgumentDesc</Scope>
    </TokenIdentifier>
    <Path>classPLT__ArgumentDesc.html</Path>
    <Abstract>The PLT_ArgumentDesc class provides information about a given argument of a UPnP Service given action...</Abstract>
    <DeclaredIn>PltArgument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ArgumentDescNameFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ArgumentDescNameFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__ArgumentDescNameFinder.html</Path>
    <Abstract>The PLT_ArgumentDescNameFinder class provides a mechanism to find a PLT_ArgumentDesc given an argumen...</Abstract>
    <DeclaredIn>PltArgument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ArgumentNameFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ArgumentNameFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__ArgumentNameFinder.html</Path>
    <Abstract>The PLT_ArgumentNameFinder class provides a mechanism to find a PLT_Argument given an argument name.</Abstract>
    <DeclaredIn>PltArgument.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_BrowseInfo</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_BrowseInfo</Scope>
    </TokenIdentifier>
    <Path>structPLT__BrowseInfo.html</Path>
    <Abstract>The PLT_BrowseInfo struct is used to marshall Browse or Search action response results across differe...</Abstract>
    <DeclaredIn>PltMediaBrowser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_Constants</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_Constants</Scope>
    </TokenIdentifier>
    <Path>classPLT__Constants.html</Path>
    <Abstract>The PLT_Constants class provides a way to globally set or get certain UPnP constants.</Abstract>
    <DeclaredIn>PltConstants.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_CtrlPoint</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_CtrlPoint</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPoint.html</Path>
    <Abstract>The PLT_CtrlPoint class implements the base functionality of a UPnP ControlPoint.</Abstract>
    <DeclaredIn>PltCtrlPoint.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetPort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_CtrlPoint</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPoint.html</Path>
    <Anchor>a7cca149a94adb33c75fecee9ddc17274</Anchor>
    <Abstract>Returns the port used by the internal HTTP server for all incoming event notifications.</Abstract>
    <DeclaredIn>PltCtrlPoint.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_CtrlPointGetDescriptionTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_CtrlPointGetDescriptionTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPointGetDescriptionTask.html</Path>
    <Abstract>The PLT_CtrlPointGetDescriptionTask class fetches the description xml document from a UPnP device.</Abstract>
    <DeclaredIn>PltCtrlPointTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a831407ed45c6b724d7d1fb3f5c110e89</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a1bbb059e21ed35b90c299948d7a10fa3</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_CtrlPointGetSCPDRequest</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_CtrlPointGetSCPDRequest</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPointGetSCPDRequest.html</Path>
    <Abstract>The PLT_CtrlPointGetSCPDRequest class is used by a PLT_CtrlPointGetSCPDsTask task to fetch a specific...</Abstract>
    <DeclaredIn>PltCtrlPointTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_CtrlPointGetSCPDsTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_CtrlPointGetSCPDsTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPointGetSCPDsTask.html</Path>
    <Abstract>The PLT_CtrlPointGetSCPDsTask class fetches the SCPD xml document of one or more services for a given...</Abstract>
    <DeclaredIn>PltCtrlPointTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a831407ed45c6b724d7d1fb3f5c110e89</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a1bbb059e21ed35b90c299948d7a10fa3</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_CtrlPointHouseKeepingTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_CtrlPointHouseKeepingTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPointHouseKeepingTask.html</Path>
    <Abstract>The PLT_CtrlPointHouseKeepingTask class is used by a PLT_CtrlPoint to keep track of expired devices a...</Abstract>
    <DeclaredIn>PltCtrlPointTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_CtrlPointHouseKeepingTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPointHouseKeepingTask.html</Path>
    <Anchor>a89786671ff392006a9665b15128fb19b</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltCtrlPointTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a9b15125495aafb15fdb3c5fe5c7aa7d6</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_CtrlPointInvokeActionTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_CtrlPointInvokeActionTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPointInvokeActionTask.html</Path>
    <Abstract>The PLT_CtrlPointInvokeActionTask class is used by a PLT_CtrlPoint to invoke a specific action of a g...</Abstract>
    <DeclaredIn>PltCtrlPointTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a831407ed45c6b724d7d1fb3f5c110e89</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a1bbb059e21ed35b90c299948d7a10fa3</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_CtrlPointListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_CtrlPointListener</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPointListener.html</Path>
    <Abstract>The PLT_CtrlPointListener class is an interface used to receive notifications when devices are found ...</Abstract>
    <DeclaredIn>PltCtrlPoint.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_CtrlPointSubscribeEventTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_CtrlPointSubscribeEventTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__CtrlPointSubscribeEventTask.html</Path>
    <Abstract>The PLT_CtrlPointSubscribeEventTask class is used to subscribe, renew or cancel a subscription for a ...</Abstract>
    <DeclaredIn>PltCtrlPointTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a831407ed45c6b724d7d1fb3f5c110e89</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a1bbb059e21ed35b90c299948d7a10fa3</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_DeviceData</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_DeviceData</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceData.html</Path>
    <Abstract>The PLT_DeviceData class holds information about a device being advertised or found by a control poin...</Abstract>
    <DeclaredIn>PltDeviceData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_DeviceDataFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_DeviceDataFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceDataFinder.html</Path>
    <Abstract>The PLT_DeviceDataFinder class returns a PLT_DeviceData instance given a device UUID.</Abstract>
    <DeclaredIn>PltDeviceData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_DeviceDataFinderByType</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_DeviceDataFinderByType</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceDataFinderByType.html</Path>
    <Abstract>The PLT_DeviceDataFinderByType class returns a PLT_DeviceData instance given a device type.</Abstract>
    <DeclaredIn>PltDeviceData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_DeviceHost</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Abstract>UPnP Device Host.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_DeviceHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a591b65703479cd7c013da6eca7d1c249</Anchor>
    <Abstract>Creates a new instance of UPnP Device Host.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddIcon</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a915dd042e351e9ea7909ec5fb7c1d457</Anchor>
    <Abstract>Add UPnP icon information to serve from file system.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddIcon</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a06b7401e72ecdde48d6f1214be2cc269</Anchor>
    <Abstract>Add UPnP icon information to serve using static image.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetPort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a311cf4f392f1360386dc54eac8cda6f7</Anchor>
    <Abstract>Returns the port used by the internal HTTP server for all incoming requests.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetByeByeFirst</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a1521707cbfd3a4a5bd5e8a5492e0f32c</Anchor>
    <Abstract>When a UPnP device comes up, the specifications require that a SSDP bye-bye sequence is sent to force...</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetLeaseTime</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a698419ac072a2556b8bfc798aaa8457a</Anchor>
    <Abstract>Sets the lease time.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Announce</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a0a0ee2ac18effda3e2a6c092e10fdf18</Anchor>
    <Abstract>Called during SSDP announce.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OnAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>ab7273043b1478ac9a25e487a9a680436</Anchor>
    <Abstract>This mehod is called when an action performed by a control point has been received and needs to be an...</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OnSsdpPacket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a7ded32b87840ed8c1bc82856e2457926</Anchor>
    <Abstract>PLT_SsdpPacketListener method called when a M-SEARCH SSDP packet is received.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessGetDescription</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a6d19198be6e04145d347091c22e74a83</Anchor>
    <Abstract>This method is called when a control point is requesting the device description.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessGetSCPD</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a4fd96bc569d9d5abec21c04d91ab4b6a</Anchor>
    <Abstract>This method is called when a control point is requesting a service SCPD.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessHttpGetRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a4430bb0cff4d99f1baeaf875e767e937</Anchor>
    <Abstract>This method is called when a &quot;GET&quot; request for a resource other than the device description,...</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessHttpPostRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>aab39d95992b0238d8078ff1af3056110</Anchor>
    <Abstract>This method is called when a &quot;POST&quot; request has been received.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessHttpSubscriberRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a462ec402b8a616bf0222ad4d124e5a0f</Anchor>
    <Abstract>This method is called when a request from a subscriber has been received.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SendSsdpSearchResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a170851228317d1be999dcbb518b7b608</Anchor>
    <Abstract>Called by PLT_SsdpDeviceSearchResponseTask when responding to a M-SEARCH SSDP request.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupDevice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a68b6fcb77b9d4e552014db3c82708354</Anchor>
    <Abstract>Default implementation for setting up device host.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupIcons</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>aef1285456b0ca57ae1957a1b87af3605</Anchor>
    <Abstract>Default implementation for registering device icon resources.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>ac051616deee99d5db86d25ca6023a950</Anchor>
    <Abstract>NPT_HttpRequestHandler method for setting up the response of an incoming HTTP request.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupServices</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a771c8bd5fe317db6699be4dff621fb70</Anchor>
    <Abstract>Required method for setting up UPnP services of device host (and any embedded).</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a07e8a7b833c53f78bec2a037ee45de24</Anchor>
    <Abstract>Called by PLT_TaskManager when the device is started.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>add842d9fb2313b16a216e395acae1412</Anchor>
    <Abstract>Called by PLT_TaskManager when the device is stoped.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Announce</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a8ee3f59b42b95745561fd7bb5e51a6e8</Anchor>
    <Abstract>Static method similar to Announce.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SendSsdpSearchResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>adeef84858f84d2b2c834747fc475d750</Anchor>
    <Abstract>Static method similar to SendSsdpSearchResponse.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_DeviceIcon</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_DeviceIcon</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceIcon.html</Path>
    <Abstract>The PLT_DeviceIcon class represents a given instance of a UPnP device icon.</Abstract>
    <DeclaredIn>PltDeviceData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_Didl</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_Didl</Scope>
    </TokenIdentifier>
    <Path>classPLT__Didl.html</Path>
    <Abstract>DIDL manipulation.</Abstract>
    <DeclaredIn>PltDidl.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_EventNotification</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_EventNotification</Scope>
    </TokenIdentifier>
    <Path>classPLT__EventNotification.html</Path>
    <Abstract>The PLT_EventNotification class represents an event notification for a given service to a given subsc...</Abstract>
    <DeclaredIn>PltEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_EventSubscriber</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_EventSubscriber</Scope>
    </TokenIdentifier>
    <Path>classPLT__EventSubscriber.html</Path>
    <Abstract>The PLT_EventSubscriber class represents an event subscription for a given service from a UPnP Contro...</Abstract>
    <DeclaredIn>PltEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_EventSubscriberFinderByCallbackURL</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_EventSubscriberFinderByCallbackURL</Scope>
    </TokenIdentifier>
    <Path>classPLT__EventSubscriberFinderByCallbackURL.html</Path>
    <Abstract>The PLT_EventSubscriberFinderByCallbackURL class returns an instance of a PLT_EventSubscriber given i...</Abstract>
    <DeclaredIn>PltEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_EventSubscriberFinderByService</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_EventSubscriberFinderByService</Scope>
    </TokenIdentifier>
    <Path>classPLT__EventSubscriberFinderByService.html</Path>
    <Abstract>The PLT_EventSubscriberFinderByService class returns an instance of a PLT_EventSubscriber given a UPn...</Abstract>
    <DeclaredIn>PltEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_EventSubscriberFinderBySID</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_EventSubscriberFinderBySID</Scope>
    </TokenIdentifier>
    <Path>classPLT__EventSubscriberFinderBySID.html</Path>
    <Abstract>The PLT_EventSubscriberFinderBySID class returns an instance of a PLT_EventSubscriber given its subsc...</Abstract>
    <DeclaredIn>PltEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_FileMediaServer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_FileMediaServer</Scope>
    </TokenIdentifier>
    <Path>classPLT__FileMediaServer.html</Path>
    <Abstract>File Media Server.</Abstract>
    <DeclaredIn>PltFileMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_DeviceHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a591b65703479cd7c013da6eca7d1c249</Anchor>
    <Abstract>Creates a new instance of UPnP Device Host.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddIcon</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a915dd042e351e9ea7909ec5fb7c1d457</Anchor>
    <Abstract>Add UPnP icon information to serve from file system.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddIcon</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a06b7401e72ecdde48d6f1214be2cc269</Anchor>
    <Abstract>Add UPnP icon information to serve using static image.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetPort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a311cf4f392f1360386dc54eac8cda6f7</Anchor>
    <Abstract>Returns the port used by the internal HTTP server for all incoming requests.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetByeByeFirst</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a1521707cbfd3a4a5bd5e8a5492e0f32c</Anchor>
    <Abstract>When a UPnP device comes up, the specifications require that a SSDP bye-bye sequence is sent to force...</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetLeaseTime</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a698419ac072a2556b8bfc798aaa8457a</Anchor>
    <Abstract>Sets the lease time.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OnAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_MediaServer</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaServer.html</Path>
    <Anchor>a155bf397405b1f6988dc07682b38683b</Anchor>
    <Abstract>This mehod is called when an action performed by a control point has been received and needs to be an...</Abstract>
    <DeclaredIn>PltMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessHttpGetRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_MediaServer</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaServer.html</Path>
    <Anchor>a5b334b86c2666dfa0b53d8604d87eb41</Anchor>
    <Abstract>This method is called when a &quot;GET&quot; request for a resource other than the device description,...</Abstract>
    <DeclaredIn>PltMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupServices</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_MediaServer</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaServer.html</Path>
    <Anchor>af1a897792de773486eaed2caf51d4233</Anchor>
    <Abstract>Required method for setting up UPnP services of device host (and any embedded).</Abstract>
    <DeclaredIn>PltMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Announce</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a0a0ee2ac18effda3e2a6c092e10fdf18</Anchor>
    <Abstract>Called during SSDP announce.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OnSsdpPacket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a7ded32b87840ed8c1bc82856e2457926</Anchor>
    <Abstract>PLT_SsdpPacketListener method called when a M-SEARCH SSDP packet is received.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessGetDescription</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a6d19198be6e04145d347091c22e74a83</Anchor>
    <Abstract>This method is called when a control point is requesting the device description.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessGetSCPD</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a4fd96bc569d9d5abec21c04d91ab4b6a</Anchor>
    <Abstract>This method is called when a control point is requesting a service SCPD.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessHttpPostRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>aab39d95992b0238d8078ff1af3056110</Anchor>
    <Abstract>This method is called when a &quot;POST&quot; request has been received.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessHttpSubscriberRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a462ec402b8a616bf0222ad4d124e5a0f</Anchor>
    <Abstract>This method is called when a request from a subscriber has been received.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SendSsdpSearchResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a170851228317d1be999dcbb518b7b608</Anchor>
    <Abstract>Called by PLT_SsdpDeviceSearchResponseTask when responding to a M-SEARCH SSDP request.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupDevice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a68b6fcb77b9d4e552014db3c82708354</Anchor>
    <Abstract>Default implementation for setting up device host.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupIcons</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>aef1285456b0ca57ae1957a1b87af3605</Anchor>
    <Abstract>Default implementation for registering device icon resources.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>ac051616deee99d5db86d25ca6023a950</Anchor>
    <Abstract>NPT_HttpRequestHandler method for setting up the response of an incoming HTTP request.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a07e8a7b833c53f78bec2a037ee45de24</Anchor>
    <Abstract>Called by PLT_TaskManager when the device is started.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>add842d9fb2313b16a216e395acae1412</Anchor>
    <Abstract>Called by PLT_TaskManager when the device is stoped.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Announce</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a8ee3f59b42b95745561fd7bb5e51a6e8</Anchor>
    <Abstract>Static method similar to Announce.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SendSsdpSearchResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>adeef84858f84d2b2c834747fc475d750</Anchor>
    <Abstract>Static method similar to SendSsdpSearchResponse.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_FileMediaServerDelegate</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_FileMediaServerDelegate</Scope>
    </TokenIdentifier>
    <Path>classPLT__FileMediaServerDelegate.html</Path>
    <Abstract>File Media Server Delegate.</Abstract>
    <DeclaredIn>PltFileMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_GetSCPDXMLIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PLT_GetSCPDXMLIterator</Scope>
    </TokenIdentifier>
    <Path>classPLT__GetSCPDXMLIterator.html</Path>
    <Abstract>The PLT_GetSCPDXMLIterator class provides a recursive way to serialize an SCPD into an xml tree.</Abstract>
    <DeclaredIn>PltAction.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_HttpClientSocketTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Abstract>The PLT_HttpClientSocketTask class is the base class used to send a HTTP request asynchronously using...</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a831407ed45c6b724d7d1fb3f5c110e89</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a1bbb059e21ed35b90c299948d7a10fa3</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_HttpClientTask</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PLT_HttpClientTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientTask.html</Path>
    <Abstract>The PLT_HttpClientTask class is a templatized version of PLT_HttpClientSocketTask to support arbitrar...</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a831407ed45c6b724d7d1fb3f5c110e89</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpClientSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpClientSocketTask.html</Path>
    <Anchor>a1bbb059e21ed35b90c299948d7a10fa3</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpClientTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_HttpHelper</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_HttpHelper</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpHelper.html</Path>
    <Abstract>The PLT_HttpHelper class is a set of utility functions for manipulating HTTP headers,...</Abstract>
    <DeclaredIn>PltHttp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_HttpListenTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_HttpListenTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpListenTask.html</Path>
    <Abstract>The PLT_HttpListenTask class is used by a PLT_HttpServer to listen for incoming connections and spawn...</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpListenTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpListenTask.html</Path>
    <Anchor>a69a50b3dca26b0b8946635c931030105</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpListenTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpListenTask.html</Path>
    <Anchor>a1b8ba6637c1ce49772ecbf0da72ab8bc</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_HttpRequestContext</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_HttpRequestContext</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpRequestContext.html</Path>
    <Abstract>The PLT_HttpRequestContext class holds information about the request sent, the local &amp; remote ip addr...</Abstract>
    <DeclaredIn>PltHttp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_HttpRequestHandler</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_HttpRequestHandler</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpRequestHandler.html</Path>
    <Abstract>The PLT_HttpRequestHandler class delegates the handling of the response of a received HTTP request by...</Abstract>
    <DeclaredIn>PltHttp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_HttpServer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_HttpServer</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpServer.html</Path>
    <Abstract>The PLT_HttpServer class provides an asynchronous way to handle multiple HTTP requests concurrently.</Abstract>
    <DeclaredIn>PltHttpServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_HttpServerSocketTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_HttpServerSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpServerSocketTask.html</Path>
    <Abstract>The PLT_HttpServerSocketTask class is a task used for handling one or more HTTP requests from a clien...</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpServerSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpServerSocketTask.html</Path>
    <Anchor>ad033c557c409219803476a3517ce290f</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpServerSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpServerSocketTask.html</Path>
    <Anchor>add152a624b609a0d14dfd1c6f0e91656</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_HttpServerTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_HttpServerTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpServerTask.html</Path>
    <Abstract>The PLT_HttpServerTask class is a version of PLT_HttpServerSocketTask that supports delegation of HTT...</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpServerSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpServerSocketTask.html</Path>
    <Anchor>ad033c557c409219803476a3517ce290f</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpServerSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpServerSocketTask.html</Path>
    <Anchor>add152a624b609a0d14dfd1c6f0e91656</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_InputDatagramStream</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_InputDatagramStream</Scope>
    </TokenIdentifier>
    <Path>classPLT__InputDatagramStream.html</Path>
    <Abstract>The PLT_InputDatagramStream class is a simple buffered input stream used when reading SSDP packets on...</Abstract>
    <DeclaredIn>PltDatagramStream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_LastChangeXMLIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_LastChangeXMLIterator</Scope>
    </TokenIdentifier>
    <Path>classPLT__LastChangeXMLIterator.html</Path>
    <Abstract>The PLT_LastChangeXMLIterator class is used to serialize the LastChange variable changes into xml giv...</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_MediaBrowser</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_MediaBrowser</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaBrowser.html</Path>
    <Abstract>The PLT_MediaBrowser class implements a UPnP AV Media Server control point.</Abstract>
    <DeclaredIn>PltMediaBrowser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_MediaBrowserDelegate</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_MediaBrowserDelegate</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaBrowserDelegate.html</Path>
    <Abstract>The PLT_MediaBrowserDelegate class is an interface for receiving PLT_MediaBrowser events or action re...</Abstract>
    <DeclaredIn>PltMediaBrowser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_MediaCache</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PLT_MediaCache</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaCache.html</Path>
    <Abstract>The PLT_MediaCache template provides a way to hold references to object in memory.</Abstract>
    <DeclaredIn>PltMediaCache.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_MediaContainer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_MediaContainer</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaContainer.html</Path>
    <Abstract>The PLT_MediaContainer class represents a first-level class derived directly from PLT_MediaObject.</Abstract>
    <DeclaredIn>PltMediaItem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_MediaItem</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_MediaItem</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaItem.html</Path>
    <Abstract>The PLT_MediaItem class represents a first-level class derived directly from PLT_MediaObject.</Abstract>
    <DeclaredIn>PltMediaItem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_MediaObject</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_MediaObject</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaObject.html</Path>
    <Abstract>The PLT_MediaObject class is any data entity that can be returned by a ContentDirectory Service from ...</Abstract>
    <DeclaredIn>PltMediaItem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_MediaObjectList</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_MediaObjectList</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaObjectList.html</Path>
    <Abstract>The PLT_MediaObjectList class is a list of PLT_MediaObject instances.</Abstract>
    <DeclaredIn>PltMediaItem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_MediaServer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_MediaServer</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaServer.html</Path>
    <Abstract>The PLT_MediaServer class implements the base class for a UPnP AV Media Server device.</Abstract>
    <DeclaredIn>PltMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OnAction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_MediaServer</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaServer.html</Path>
    <Anchor>a155bf397405b1f6988dc07682b38683b</Anchor>
    <Abstract>This mehod is called when an action performed by a control point has been received and needs to be an...</Abstract>
    <DeclaredIn>PltMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessHttpGetRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_MediaServer</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaServer.html</Path>
    <Anchor>a5b334b86c2666dfa0b53d8604d87eb41</Anchor>
    <Abstract>This method is called when a &quot;GET&quot; request for a resource other than the device description,...</Abstract>
    <DeclaredIn>PltMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupServices</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_MediaServer</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaServer.html</Path>
    <Anchor>af1a897792de773486eaed2caf51d4233</Anchor>
    <Abstract>Required method for setting up UPnP services of device host (and any embedded).</Abstract>
    <DeclaredIn>PltMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Announce</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a0a0ee2ac18effda3e2a6c092e10fdf18</Anchor>
    <Abstract>Called during SSDP announce.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OnSsdpPacket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a7ded32b87840ed8c1bc82856e2457926</Anchor>
    <Abstract>PLT_SsdpPacketListener method called when a M-SEARCH SSDP packet is received.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessGetDescription</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a6d19198be6e04145d347091c22e74a83</Anchor>
    <Abstract>This method is called when a control point is requesting the device description.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessGetSCPD</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a4fd96bc569d9d5abec21c04d91ab4b6a</Anchor>
    <Abstract>This method is called when a control point is requesting a service SCPD.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessHttpPostRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>aab39d95992b0238d8078ff1af3056110</Anchor>
    <Abstract>This method is called when a &quot;POST&quot; request has been received.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessHttpSubscriberRequest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a462ec402b8a616bf0222ad4d124e5a0f</Anchor>
    <Abstract>This method is called when a request from a subscriber has been received.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SendSsdpSearchResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a170851228317d1be999dcbb518b7b608</Anchor>
    <Abstract>Called by PLT_SsdpDeviceSearchResponseTask when responding to a M-SEARCH SSDP request.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupDevice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a68b6fcb77b9d4e552014db3c82708354</Anchor>
    <Abstract>Default implementation for setting up device host.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupIcons</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>aef1285456b0ca57ae1957a1b87af3605</Anchor>
    <Abstract>Default implementation for registering device icon resources.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetupResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>ac051616deee99d5db86d25ca6023a950</Anchor>
    <Abstract>NPT_HttpRequestHandler method for setting up the response of an incoming HTTP request.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a07e8a7b833c53f78bec2a037ee45de24</Anchor>
    <Abstract>Called by PLT_TaskManager when the device is started.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>add842d9fb2313b16a216e395acae1412</Anchor>
    <Abstract>Called by PLT_TaskManager when the device is stoped.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_DeviceHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a591b65703479cd7c013da6eca7d1c249</Anchor>
    <Abstract>Creates a new instance of UPnP Device Host.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddIcon</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a915dd042e351e9ea7909ec5fb7c1d457</Anchor>
    <Abstract>Add UPnP icon information to serve from file system.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddIcon</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a06b7401e72ecdde48d6f1214be2cc269</Anchor>
    <Abstract>Add UPnP icon information to serve using static image.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetPort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a311cf4f392f1360386dc54eac8cda6f7</Anchor>
    <Abstract>Returns the port used by the internal HTTP server for all incoming requests.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetByeByeFirst</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a1521707cbfd3a4a5bd5e8a5492e0f32c</Anchor>
    <Abstract>When a UPnP device comes up, the specifications require that a SSDP bye-bye sequence is sent to force...</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetLeaseTime</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a698419ac072a2556b8bfc798aaa8457a</Anchor>
    <Abstract>Sets the lease time.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Announce</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>a8ee3f59b42b95745561fd7bb5e51a6e8</Anchor>
    <Abstract>Static method similar to Announce.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SendSsdpSearchResponse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PLT_DeviceHost</Scope>
    </TokenIdentifier>
    <Path>classPLT__DeviceHost.html</Path>
    <Anchor>adeef84858f84d2b2c834747fc475d750</Anchor>
    <Abstract>Static method similar to SendSsdpSearchResponse.</Abstract>
    <DeclaredIn>PltDeviceHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_MediaServerDelegate</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_MediaServerDelegate</Scope>
    </TokenIdentifier>
    <Path>classPLT__MediaServerDelegate.html</Path>
    <Abstract>The PLT_MediaServerDelegate class is an interface for delegating the handling of the required UPnP AV...</Abstract>
    <DeclaredIn>PltMediaServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_NetworkInterfaceAddressSearchIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_NetworkInterfaceAddressSearchIterator</Scope>
    </TokenIdentifier>
    <Path>classPLT__NetworkInterfaceAddressSearchIterator.html</Path>
    <Abstract>The PLT_NetworkInterfaceAddressSearchIterator class returns the network interface given an IP address...</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ObjectClass</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ObjectClass</Scope>
    </TokenIdentifier>
    <Path>structPLT__ObjectClass.html</Path>
    <Abstract>The PLT_ObjectClass struct is used to assign a type to a PLT_MediaObject.</Abstract>
    <DeclaredIn>PltMediaItem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_OutputDatagramStream</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_OutputDatagramStream</Scope>
    </TokenIdentifier>
    <Path>classPLT__OutputDatagramStream.html</Path>
    <Abstract>The PLT_OutputDatagramStream class is a simple buffered output stream used when writing SSDP packets ...</Abstract>
    <DeclaredIn>PltDatagramStream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ProtocolInfo</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ProtocolInfo</Scope>
    </TokenIdentifier>
    <Path>classPLT__ProtocolInfo.html</Path>
    <Abstract>The PLT_ProtocolInfo class holds information about the protocol info of a given UPnP Media Item resou...</Abstract>
    <DeclaredIn>PltProtocolInfo.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_Service</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Abstract>UPnP Service.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_Service</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>aba52272bc129a953e3b6f82343efe117</Anchor>
    <Abstract>Create an instance of a UPnP Service either hosted or discovered.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FindActionDesc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>aad94aa1f6730fa87d7c9c50b273c4b7a</Anchor>
    <Abstract>Return the PLT_ActionDesc given an action name.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FindStateVariable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>ad40fe78b581d19dc61f844df94a0e3bc</Anchor>
    <Abstract>Return the PLT_StateVariable pointer given a state variable name.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ForceVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a87f5c2a7c5d2d996a86300fd28674edb</Anchor>
    <Abstract>When a control point discover a new service with a higher version number than it can work with,...</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetActionDescs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a78679fc7406e8db016ac95008f9789c8</Anchor>
    <Abstract>Return an array of actions descriptions PLT_ActionDesc.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetControlURL</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a0a309c882887a29f85d76de6783bec14</Anchor>
    <Abstract>Return the Control url associated with this service.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetDescription</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a9caaaff70206431d059311f7d5e5921e</Anchor>
    <Abstract>Populate the UPnP Device description document with service information.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetDevice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a9015a39bcc6c1e18e2b7b44a3e13dea8</Anchor>
    <Abstract>Return the PLT_DeviceData* the service is associated with.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetEventSubURL</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a5f5429286478d899fce77e66737479a2</Anchor>
    <Abstract>Return the Event subscription url associated with this service.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetSCPDURL</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a5874cdf710621cc059f4f5de1d97ee31</Anchor>
    <Abstract>Return the SCPD url associated with this service.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetSCPDXML</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a4d35ef34e3e240b7a89d55e1f827d3ca</Anchor>
    <Abstract>Return the service SCPD xml document.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetServiceID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a99aa8a2d926050dabea19747ae588a1b</Anchor>
    <Abstract>Return the service id.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetServiceName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>acf20f9f0c3c1453bc37b0bb907964272</Anchor>
    <Abstract>Return the service friendly name.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetServiceType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a178469ba3e404c48003539cede7ab103</Anchor>
    <Abstract>Return the service type.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetStateVariables</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a216f57ff32f6900dd8a95b4a540023e6</Anchor>
    <Abstract>Return the list of state variables.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetStateVariableValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a9961f9bef1be4a70fb1aa113a71b6c59</Anchor>
    <Abstract>Return the state variable value given a state variable name.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IncStateVariable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a33efcee89b6b58a67759fb8281177f09</Anchor>
    <Abstract>Helper function to increment a state variable representing a number.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InitURLs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>ab5bee8c30f35299d48484fa0594b92c1</Anchor>
    <Abstract>When service is hosted by a PLT_DeviceHost, this setups the SCPD, control and event urls.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsSubscribable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>ac4f38b21bfb5dee3558679d11ad6cf43</Anchor>
    <Abstract>Return whether a service is capable of sending events.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsValid</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a1170a00ab4f6babcae36a4d09d4cb6fe</Anchor>
    <Abstract>Verify the service has been properly initialized or is a valid discovered service.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PauseEventing</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a0d0cd1ba92c65c01c050f364e8b22d03</Anchor>
    <Abstract>When a PLT_DeviceHost needs to change more than one state variables at a time but would rather send o...</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetEventSubURL</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a1562806fe7d0e64dac48eae4e81f7547</Anchor>
    <Abstract>Set the Service Event subscription url for control points to be able to subscribe to events.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetSCPDURL</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>ae3fe41adf051ffee6bbe50ab36f83d7f</Anchor>
    <Abstract>Set the SCPD url for control points to be able to fetch the SCPD xml document.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetSCPDXML</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a112845eef4824867a312651d38b2fa6a</Anchor>
    <Abstract>Set the service SCPD xml document.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetStateVariable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a24d88544d586588c287989d3f0d6c779</Anchor>
    <Abstract>Set a new value for a given state variable.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetStateVariableExtraAttribute</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>a709d12a79a4684b832e20f7348b8fd8c</Anchor>
    <Abstract>Certain state variables require extra xml attributes when serialized.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetStateVariableRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_Service</Scope>
    </TokenIdentifier>
    <Path>classPLT__Service.html</Path>
    <Anchor>aaebc2185018595837d99e2a5b58ef2bc</Anchor>
    <Abstract>Certain state variables notifications must not be sent faster than a certain rate according to the UP...</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ServiceControlURLFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ServiceControlURLFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__ServiceControlURLFinder.html</Path>
    <Abstract>The PLT_ServiceControlURLFinder class returns an instance of a PLT_Service given a service control ur...</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ServiceEventSubURLFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ServiceEventSubURLFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__ServiceEventSubURLFinder.html</Path>
    <Abstract>The PLT_ServiceEventSubURLFinder class returns an instance of a PLT_Service given a service event sub...</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ServiceIDFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ServiceIDFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__ServiceIDFinder.html</Path>
    <Abstract>The PLT_ServiceIDFinder class returns an instance of a PLT_Service given a service id.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ServiceNameFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ServiceNameFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__ServiceNameFinder.html</Path>
    <Abstract>The PLT_ServiceNameFinder class returns an instance of a PLT_Service given a service name.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ServiceSCPDURLFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ServiceSCPDURLFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__ServiceSCPDURLFinder.html</Path>
    <Abstract>The PLT_ServiceSCPDURLFinder class returns an instance of a PLT_Service given a service SCPD url.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ServiceTypeFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ServiceTypeFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__ServiceTypeFinder.html</Path>
    <Abstract>The PLT_ServiceTypeFinder class returns an instance of a PLT_Service given a service type.</Abstract>
    <DeclaredIn>PltService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpAnnounceInterfaceIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpAnnounceInterfaceIterator</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpAnnounceInterfaceIterator.html</Path>
    <Abstract>The PLT_SsdpAnnounceInterfaceIterator class is used to send SSDP announcements given a list of networ...</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpDeviceAnnounceTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpDeviceAnnounceTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpDeviceAnnounceTask.html</Path>
    <Abstract>The PLT_SsdpDeviceAnnounceTask class is a task to send UPnP Device SSDP announcements (alive or byeby...</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_SsdpDeviceAnnounceTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpDeviceAnnounceTask.html</Path>
    <Anchor>a23a59359b24863c47ccc331549dcbf9d</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a9b15125495aafb15fdb3c5fe5c7aa7d6</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpDeviceSearchResponseInterfaceIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpDeviceSearchResponseInterfaceIterator</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpDeviceSearchResponseInterfaceIterator.html</Path>
    <Abstract>The PLT_SsdpDeviceSearchResponseInterfaceIterator class looks for the best network interface to use t...</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpDeviceSearchResponseTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpDeviceSearchResponseTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpDeviceSearchResponseTask.html</Path>
    <Abstract>The PLT_SsdpDeviceSearchResponseTask class is used by a PLT_DeviceHost to respond to SSDP M-SEARCH re...</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_SsdpDeviceSearchResponseTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpDeviceSearchResponseTask.html</Path>
    <Anchor>a6d1b391fb2c2a4f23009c743470343b1</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a9b15125495aafb15fdb3c5fe5c7aa7d6</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpInitMulticastIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpInitMulticastIterator</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpInitMulticastIterator.html</Path>
    <Abstract>The PLT_SsdpInitMulticastIterator class is used to join a multicast group given a list of IP addresse...</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpListenTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpListenTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpListenTask.html</Path>
    <Abstract>The PLT_SsdpListenTask class is used to listen for incoming SSDP packets and keep track of a list of ...</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_SsdpListenTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpListenTask.html</Path>
    <Anchor>aaa4a82354a183ba2e87f6621245acd9e</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_HttpServerSocketTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__HttpServerSocketTask.html</Path>
    <Anchor>add152a624b609a0d14dfd1c6f0e91656</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltHttpServerTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpPacketListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpPacketListener</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpPacketListener.html</Path>
    <Abstract>The PLT_SsdpPacketListener class is an interface for handling SSDP packets (M-SEARCH and NOTIFY).</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpPacketListenerIterator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpPacketListenerIterator</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpPacketListenerIterator.html</Path>
    <Abstract>The PLT_SsdpPacketListenerIterator class iterates through a list of PLT_SsdpPacketListener instances ...</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpSearchResponseListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpSearchResponseListener</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpSearchResponseListener.html</Path>
    <Abstract>The PLT_SsdpSearchResponseListener class is an interface for handling SSDP M-SEARCH responses.</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpSearchTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpSearchTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpSearchTask.html</Path>
    <Abstract>The PLT_SsdpSearchTask class is a task used by a PLT_CtrlPoint to issue a SSDP M-SEARCH request.</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_SsdpSearchTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpSearchTask.html</Path>
    <Anchor>a7dae0209469a807970fa967340cbb0f1</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_SsdpSearchTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpSearchTask.html</Path>
    <Anchor>a2a597f6571227184d426e137f5e94295</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_SsdpSender</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_SsdpSender</Scope>
    </TokenIdentifier>
    <Path>classPLT__SsdpSender.html</Path>
    <Abstract>The PLT_SsdpSender class provides a mechanism to format and send SSDP packets.</Abstract>
    <DeclaredIn>PltSsdp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_StateVariable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Abstract>The PLT_StateVariable class maintains the state of a UPnP Service state variable.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DisableIndirectEventing</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>a0682faf03a432281b976323e7f1e4765</Anchor>
    <Abstract>Force the state variable to send events directly.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetAllowedValueRange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>a34accba754fe9e1c12ccf170303b1bc2</Anchor>
    <Abstract>Return the state variable allowed value range if any.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetDataType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>a1079252f20ad2696bad7be8283bcd9b4</Anchor>
    <Abstract>Return the state variable data type.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>a0609dbbf5dcca48e52dbe9a13ea22ec2</Anchor>
    <Abstract>Return the state variable name.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetSCPDXML</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>a4359ad0b9a057a40a204dc52d08e7010</Anchor>
    <Abstract>Populate the SCPD xml document with state variable information.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>afbe75f546c27a9de4240e216a79323dc</Anchor>
    <Abstract>Return the PLT_Service that this state variable is associated with.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>a1c0bcd69e32d949c41c19f401c030176</Anchor>
    <Abstract>Return the current state variable value.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsSendingEvents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>a6c8e32303115fd4261b67e848707d1cc</Anchor>
    <Abstract>Return whether the state variable is eventable directly or indirectly.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetExtraAttribute</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>ae3ff2a61490a8c9e17cf4b4b4e4f60fd</Anchor>
    <Abstract>Certain state variables require extra xml attributes when serialized.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>acd41be0cab3c9fdebe5116992463a3fb</Anchor>
    <Abstract>Certain state variables notifications must not be sent faster than a certain rate according to the UP...</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>adb4006117f8c8f6000188931146ddbe2</Anchor>
    <Abstract>Set the state variable value.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ValidateValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>a8fc1403b20781918a8cce3b26d369e19</Anchor>
    <Abstract>Validate the new value of the state variable.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Find</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>ada198679c2f52adf30b88e97243853e9</Anchor>
    <Abstract>Helper function to return a state variable given a list of state variables and a state variable name.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsReadyToPublish</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>adf6f12ba177ac8db0d412dfa2569578b</Anchor>
    <Abstract>Return whether the state variable value changed and subscribers need to be notified.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Serialize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_StateVariable</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariable.html</Path>
    <Anchor>a63b506b43ad1aa0ee77ab82638e02725</Anchor>
    <Abstract>Serialize the state variable into xml.</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_StateVariableNameFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_StateVariableNameFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__StateVariableNameFinder.html</Path>
    <Abstract>The PLT_StateVariableNameFinder class returns the PLT_StateVariable instance given a state variable n...</Abstract>
    <DeclaredIn>PltStateVariable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_TaskManager</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_TaskManager</Scope>
    </TokenIdentifier>
    <Path>classPLT__TaskManager.html</Path>
    <Abstract>The PLT_TaskManager class maintains a list of runnable tasks.</Abstract>
    <DeclaredIn>PltTaskManager.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_TaskManager</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_TaskManager</Scope>
    </TokenIdentifier>
    <Path>classPLT__TaskManager.html</Path>
    <Anchor>a6f4dbfbbdf1c4feeaf57b6ee45dbcb95</Anchor>
    <Abstract>Create a new Task Manager.</Abstract>
    <DeclaredIn>PltTaskManager.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Abort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_TaskManager</Scope>
    </TokenIdentifier>
    <Path>classPLT__TaskManager.html</Path>
    <Anchor>a4b8d656e9b2025b22c9c25a0856cac3a</Anchor>
    <Abstract>Stop all tasks associated with this task manager.</Abstract>
    <DeclaredIn>PltTaskManager.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GetMaxTasks</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_TaskManager</Scope>
    </TokenIdentifier>
    <Path>classPLT__TaskManager.html</Path>
    <Anchor>ad030ce70cd9ce09f719f4d5d97497bee</Anchor>
    <Abstract>Returns the max number of concurrent tasks allowed.</Abstract>
    <DeclaredIn>PltTaskManager.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_TaskManager</Scope>
    </TokenIdentifier>
    <Path>classPLT__TaskManager.html</Path>
    <Anchor>a9c4091ceb8b4590c0088e7e1f3c1881d</Anchor>
    <Abstract>Reset task manager after an Abort so new tasks can be queued.</Abstract>
    <DeclaredIn>PltTaskManager.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StartTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_TaskManager</Scope>
    </TokenIdentifier>
    <Path>classPLT__TaskManager.html</Path>
    <Anchor>af3ecf99e794153c906f1f299cdd383e3</Anchor>
    <Abstract>Start a new new task and associates it with this task manager.</Abstract>
    <DeclaredIn>PltTaskManager.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Abstract>The PLT_ThreadTask class is a base class for executing a given task in a worker thread.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Kill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>abe8825cdc9331213ae61102fbd146bc2</Anchor>
    <Abstract>When a task is not managed by a PLT_TaskManager, the owner must call this to stop and destroy it.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>aeb1f0bedc10ef3e4c19ea457b7b42356</Anchor>
    <Abstract>A PLT_ThreadTask base class is never instantiated directly.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PLT_ThreadTask</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a5c8032dfba6d752c5a7533e505b5baa3</Anchor>
    <Abstract>The task manager will destroy the task when finished if m_AutoDestroy is true otherwise the owner of ...</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoAbort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a9b15125495aafb15fdb3c5fe5c7aa7d6</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to stop.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoInit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>af42b0eea9045f05a8bf15c77cf8b5e23</Anchor>
    <Abstract>This method to override in derived classes is called when the task is about to start.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DoRun</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>ae31bd56f3a32c60f4c49109a480a48b9</Anchor>
    <Abstract>This method to override in derived classes is the main task loop.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsAborting</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>afe0dececd9d1452527d7cf27bc668d3c</Anchor>
    <Abstract>Return whether this task is in the process of stopping.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a38108bb0abd7164e5b0aa2658b2c55f4</Anchor>
    <Abstract>Start a task by associating it with a task manager.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_ThreadTask</Scope>
    </TokenIdentifier>
    <Path>classPLT__ThreadTask.html</Path>
    <Anchor>a82f105dd8e125383d7c3274fb7d86e9d</Anchor>
    <Abstract>Stop the task.</Abstract>
    <DeclaredIn>PltThreadTask.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_UPnP</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Abstract>The PLT_UPnP class maintains a list of devices (PLT_DeviceHost) to advertise and/or control points (P...</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_UPnP</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Anchor>a77f3ae1e4fb862c1655e74fb14226ee2</Anchor>
    <Abstract>Create a UPnP instance.</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddCtrlPoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Anchor>af1df86cec9b28e9d7dc85d286e13b310</Anchor>
    <Abstract>Add and start a control point inside this UPnP context.</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AddDevice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Anchor>ae27912d0071ef3448e1d5b2d7be29656</Anchor>
    <Abstract>Add and start a device inside this UPnP context.</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IsRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Anchor>a9dfcce34ad744c4ac76951b35db6fd8d</Anchor>
    <Abstract>Return the UPnP Engine state.</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RemoveCtrlPoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Anchor>a7b0b45f21ef87c3d801f6641a280486a</Anchor>
    <Abstract>Remove an existing control point from this UPnP context.</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RemoveDevice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Anchor>abe464759caa7dddb98eca689c785d100</Anchor>
    <Abstract>Remove an existing device from this UPnP context.</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SetIgnoreLocalUUIDs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Anchor>ae6994cb5f9f1a043bec1411df1f929f2</Anchor>
    <Abstract>When a device and a control point are added to the same UPnP context, it is desired that the device b...</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Anchor>aca64b8209ece8240b152b13b913c3b3c</Anchor>
    <Abstract>Start the UPnP context and all existing devices and control points associated with it.</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PLT_UPnP</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnP.html</Path>
    <Anchor>a3ad440ef37ef66a442769d84a85e5a30</Anchor>
    <Abstract>Stop the UPnP context and all existing devices and control points associated with it.</Abstract>
    <DeclaredIn>PltUPnP.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_UPnPMessageHelper</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_UPnPMessageHelper</Scope>
    </TokenIdentifier>
    <Path>classPLT__UPnPMessageHelper.html</Path>
    <Abstract>The PLT_UPnPMessageHelper class is a set of utility functions for manipulating specific UPnP HTTP hea...</Abstract>
    <DeclaredIn>PltUtilities.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_XmlAttributeFinder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_XmlAttributeFinder</Scope>
    </TokenIdentifier>
    <Path>classPLT__XmlAttributeFinder.html</Path>
    <Abstract>The PLT_XmlAttributeFinder class is used to determine if an attribute exists given an xml element nod...</Abstract>
    <DeclaredIn>PltUtilities.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLT_XmlHelper</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLT_XmlHelper</Scope>
    </TokenIdentifier>
    <Path>classPLT__XmlHelper.html</Path>
    <Abstract>The PLT_XmlHelper class is a set of utility functions for manipulating xml documents and DOM trees.</Abstract>
    <DeclaredIn>PltUtilities.h</DeclaredIn>
  </Token>
</Tokens>
