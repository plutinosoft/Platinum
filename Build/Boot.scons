import sys
import os
import platform
import re

EnsureSConsVersion(0,98,1)

#######################################################
# reusable functions and data structures
#######################################################

# Platform to Target Map (specifies which default target to build on a platform)
PLATFORM_TO_TARGET_MAP = {
    'linux-i386'  : 'x86-unknown-linux',
    'linux-x86_64': 'x86_64-unknown-linux',
    'linux-arm'   : 'arm-unknown-linux',
    'linux2'      : 'x86-unknown-linux',
    'win32'       : 'x86-microsoft-win32',
    'cygwin'      : 'x86-unknown-cygwin',
    'darwin'      : 'universal-apple-macosx',
    'raspberry-pi-arm' : 'arm-raspberry-pi-linux'
}

# list all target dirs
scons_root = Environment().GetBuildPath('#')
targets_dir = scons_root+'/Build/Targets'
targets_dirs = os.listdir(targets_dir)
TARGET_PLATFORMS = [x for x in targets_dirs if os.path.exists(targets_dir +'/'+x+'/Config.scons')]

def pi_version():
    """Detect the version of the Raspberry Pi.  Returns either 1, 2 or
    None depending on if it's a Raspberry Pi 1 (model A, B, A+, B+),
    Raspberry Pi 2 (model B+), or not a Raspberry Pi.
    """
    # Check /proc/cpuinfo for the Hardware field value.
    # 2708 is pi 1
    # 2709 is pi 2
    # 2835 is pi 3 on 4.9.x kernel
    # Anything else is not a pi.
    with open('/proc/cpuinfo', 'r') as infile:
        cpuinfo = infile.read()
    # Match a line like 'Hardware   : BCM2709'
    match = re.search('^Hardware\s+:\s+(\w+)$', cpuinfo,
                      flags=re.MULTILINE | re.IGNORECASE)
    if not match:
        # Couldn't find the hardware, assume it isn't a pi.
        return None
    if match.group(1) == 'BCM2708':
        # Pi 1
        return 1
    elif match.group(1) == 'BCM2709':
        # Pi 2
        return 2
    elif match.group(1) == 'BCM2835':
        # Pi 3 / Pi on 4.9.x kernel
        return 3
    else:
        # Something else, not a pi.
        return None

def DefaultTarget():
    platform_id = sys.platform
    if platform.system() == 'Linux':
        if pi_version() is not None:
            platform_id = 'raspberry-pi-arm'
        elif (platform.machine() == 'i386' or
            platform.machine() == 'i486' or
            platform.machine() == 'i586'or
            platform.machine() == 'i686'):
            platform_id = 'linux-i386'
        elif (platform.machine() == 'x86_64'):
            platform_id = 'linux-x86_64'
        elif (platform.machine().startswith('arm')):
            platform_id = 'linux-arm'

    if platform_id in PLATFORM_TO_TARGET_MAP:
        return PLATFORM_TO_TARGET_MAP[platform_id]
    else:
    	return None

#######################################################
# Main Build
#######################################################
options = Variables()
options.AddVariables(
    EnumVariable('target', 'Build Target', DefaultTarget(), allowed_values=TARGET_PLATFORMS),
    BoolVariable('stop_on_warning', 'Stop the build on warnings', False),
    ListVariable('build_config', 'build configurations', 'Debug', names=['Debug', 'Release'])
)

env = Environment(variables=options)
Help(options.GenerateHelpText(env))

if 'NPT_CONFIG_NO_SSL' in os.environ:
	env['NPT_CONFIG_NO_SSL'] = os.environ['NPT_CONFIG_NO_SSL']
if 'NPT_CONFIG_NO_ZIP' in os.environ:
	env['NPT_CONFIG_NO_ZIP'] = os.environ['NPT_CONFIG_NO_ZIP']
if 'NPT_CONFIG_NO_CRYPTO' in os.environ:
	env['NPT_CONFIG_NO_CRYPTO'] = os.environ['NPT_CONFIG_NO_CRYPTO']

base_env = env
for build_config in env['build_config']:
    env = base_env.Clone()
    env['build_config'] = build_config
    print ('********** Configuring Build Target =', env['target'], '/', build_config, '********')
    SConscript('Build.scons', variant_dir='Targets/'+env['target']+'/'+build_config, exports='env', duplicate=0)
